package com.rabbit.fitness.user.realm;

import com.rabbit.fitness.admin.service.RoleService;
import com.rabbit.fitness.constant.SysConstant;
import com.rabbit.fitness.pojo.Role;
import com.rabbit.fitness.pojo.Student;
import com.rabbit.fitness.pojo.User;

import com.rabbit.fitness.student.service.StudentService;
import com.rabbit.fitness.user.service.UserAuthServiceImpl;
import com.rabbit.fitness.user.service.UserUserService;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.*;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.authz.SimpleAuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.session.Session;
import org.apache.shiro.subject.PrincipalCollection;
import org.apache.shiro.util.ByteSource;
import org.springframework.beans.factory.annotation.Autowired;

import javax.annotation.Resource;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class CustomRealm extends AuthorizingRealm {

    @Autowired
    private UserUserService userService;
    @Autowired
    private UserAuthServiceImpl authService;

    @Resource(name = "studentService")
    private StudentService studentService;

    @Autowired
    private RoleService roleService;

    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        User user = (User)principalCollection.getPrimaryPrincipal();
        //超级管理员：--> sys:user:list  sys:user:save .......
//        List<String> perms = authService.findPermsByUserName(user.getUserName());
//        Set set= new HashSet(perms);
        SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();
        //添加权限
//        info.setStringPermissions(set);
        //添加角色

        User currentUser = userService.checkUser(user.getUserName());
        Integer roleId = currentUser.getRole().getRoleId();
        System.out.println("roleId:" + roleId);
        Role selRole = roleService.selRoleByRid(roleId);
        String roleName = selRole.getRoleName();
        info.addRole(roleName);
        // info.addRole(rolePermission.getRole());

        return info;
    }

    @Override
    protected AuthenticationInfo doGetAuthenticationInfo
            (AuthenticationToken authenticationToken) throws AuthenticationException {
        String userName = (String)authenticationToken.getPrincipal();
        User user = userService.checkUser(userName);
        if(user == null){
            throw new UnknownAccountException("账户不存在");
        }
        Session session = SecurityUtils.getSubject().getSession();
        session.setAttribute(SysConstant.CURRENT_USER,user);
//        //通过id获取学员信息,并放入session中
//        Student selStu = studentService.getStudentInfoById(user.getUserId());
//        session.setAttribute("selStuu", selStu);

        SimpleAuthenticationInfo info = new SimpleAuthenticationInfo(user,user.getPassword(),this.getName());
        info.setCredentialsSalt(ByteSource.Util.bytes(user.getUserName()));
        return info;
    }
}
