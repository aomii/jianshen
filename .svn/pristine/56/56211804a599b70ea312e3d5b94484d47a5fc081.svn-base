package com.rabbit.fitness.coach.controller;

import com.github.pagehelper.PageInfo;
import com.rabbit.fitness.coach.coachService.CoachService;
import com.rabbit.fitness.coach.vo.CoachComm;
import com.rabbit.fitness.coach.vo.CoachVO;
import com.rabbit.fitness.coach.vo.SelCoachVO;
import com.rabbit.fitness.gym.service.GymService;

import com.rabbit.fitness.pojo.Coach;
import com.rabbit.fitness.pojo.Order;
import com.rabbit.fitness.pojo.Student;

import com.rabbit.fitness.pojo.*;
import com.rabbit.fitness.utils.Result;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

@Controller
@RequestMapping("/coach")
@Api("CoachController|教练类")
public class CoachController {

    @Autowired
    private CoachService coachService;

    @Autowired
    private GymService gymService;


    /*
    分页查看所有签约学员
     */
    @PostMapping("/myStuList")
    @ResponseBody
    public List<Student> stuList(Integer page,Integer cid){
        List<Student> list = coachService.findCoachByPage(page,cid);
        return  list;
    }

    /*
    分页查看历史订单
     */
    @PostMapping("/orderList")
    @ResponseBody
    public Map<String,Object> orderList(@RequestParam(value = "page",defaultValue = "1",required = false)Integer currentPage,
                                   @RequestParam(value = "rows",defaultValue = "5",required = false) Integer pageSize,Integer cid){
        List<Order> list = coachService.findOrderByPage(currentPage,pageSize,cid);
        PageInfo<Order> pageInfo = new PageInfo<>(list);
        Map<String,Object> result = new HashMap<String, Object>();
        result.put("total",pageInfo.getTotal());
        result.put("rows",pageInfo.getList());
        return  result;
    }

    /*
    签订场馆
     */
    @PostMapping("/signGym")
    public void signGym(Integer cid,Integer gid){
        coachService.signGym(cid,gid);
    }

    /*
    学员支付订单
     */
    @PostMapping("/procOrder")
    public void procOrder(Integer oid){
        coachService.proeOrder(oid);
    }


    /**
    教练插入
     * @param request http请求
     *                我把数据都放到Formdata中了 详见coach_add
     * @return String ：插入是否成功 格式json
    */
    @ApiOperation(value = "教师信息完善",notes = "用Formdata传的详见coach_add")
    @ApiImplicitParam(name="request",required=true,paramType="query",allowMultiple = true)
    @PostMapping(value = "/addCoach")
    @ResponseBody
    public String addCoach(HttpServletRequest request) throws IOException {
        MultipartHttpServletRequest mrequest = (MultipartHttpServletRequest) request;
        MultipartFile mfile = mrequest.getFile("file");
        String cname = request.getParameter("cname");
        String cgender = request.getParameter("cgender");
        String contact = request.getParameter("contact");
        String cagestr = request.getParameter("cage");
        String uidstr = request.getParameter("uid");
        String logaddress = request.getParameter("logaddress");
        String secret = request.getParameter("secret");
        String cpricestr = request.getParameter("cprice");
        String freeday = request.getParameter("freeday");
        String freetime = request.getParameter("freetime");
        String jieke = request.getParameter("jieke");
        String liupai = request.getParameter("liupai");
        String type = request.getParameter("type");
        String cnickname = request.getParameter("cnickname");
        if (cname == null || cname.equals("") ||
                cgender == null || cgender.equals("") ||
                contact == null || contact.equals("") ||
                cagestr == null || cagestr.equals("") ||
                secret == null || secret.equals("") ||
                uidstr == null || uidstr.equals("") ||
                freeday == null || freeday.equals("") ||
                freetime == null || freetime.equals("") ||
                jieke == null || jieke.equals("") ||
                liupai == null || uidstr.equals("") ||
                type == null || type.equals("") ||
                cnickname == null || cnickname.equals("") ||
                cpricestr == null || cpricestr.equals("") ||
                mfile == null
        ) {
            return "含有*号的数据不能为空";
        } else {
            Integer cage = Integer.parseInt(cagestr);
            Integer uid = Integer.parseInt(uidstr);
            double cprice = Double.parseDouble(cpricestr);
            String fileName = mfile.getOriginalFilename();
            String path = request.getServletContext().getRealPath("");
            System.out.println(path);
            path = path.substring(0, path.lastIndexOf("\\"));
            path = path.substring(0, path.lastIndexOf("\\"));
            path = path + "\\upload";
            File file = new File(path);
            if (!file.exists()) {
                file.mkdir();
            }
            fileName = UUID.randomUUID().toString() + fileName;
            path = path+File.separator+fileName;
            file = new File(path);
            mfile.transferTo(file);
            String cpic = "/upload/"+fileName;
            double cmoney = 0;
            String isauth = "否";
            Integer count = coachService.addCoach(new Coach(cname,cgender,cpic,cmoney,type,contact,isauth,freetime,freeday,uid,secret,logaddress,cage,liupai,jieke,cprice,cnickname));
            if (count > 0) {
                return "信息提交成功";
            } else {
                return "信息提交失败";
            }
        }
    }

    /**
     * 教练修改（和后台重复代码）
     * @param request http请求
     *                我把数据都放到Formdata中了 详见coach_add
     * @return String json格式
        */
    @ApiOperation(value = "教师信息更改",notes = "用Formdata传的详见coach_add")
    @ApiImplicitParam(name="request",required=true,paramType="query",allowMultiple = true)
    @PostMapping(value = "/changeCoach")
    @ResponseBody
    public String changeCoach(HttpServletRequest request) throws IOException {
        MultipartHttpServletRequest mrequest = (MultipartHttpServletRequest) request;
        MultipartFile mfile = mrequest.getFile("file");
        String cname = request.getParameter("cname");
        String cgender = request.getParameter("cgender");
        String contact = request.getParameter("contact");
        String cagestr = request.getParameter("cage");
        String uidstr = request.getParameter("uid");
        String logaddress = request.getParameter("logaddress");
        String secret = request.getParameter("secret");
        String cpricestr = request.getParameter("cprice");
        String freeday = request.getParameter("freeday");
        String freetime = request.getParameter("freetime");
        String jieke = request.getParameter("jieke");
        String liupai = request.getParameter("liupai");
        String type = request.getParameter("type");
        String cnickname = request.getParameter("cnickname");
        if (cname == null || cname.equals("") ||
                cgender == null || cgender.equals("") ||
                contact == null || contact.equals("") ||
                cagestr == null || cagestr.equals("") ||
                secret == null || secret.equals("") ||
                uidstr == null || uidstr.equals("") ||
                freeday == null || freeday.equals("") ||
                freetime == null || freetime.equals("") ||
                jieke == null || jieke.equals("") ||
                liupai == null || uidstr.equals("") ||
                type == null || type.equals("") ||
                cnickname == null || cnickname.equals("") ||
                cpricestr == null || cpricestr.equals("") ||
                mfile == null
        ) {
            return "含有*号的数据不能为空";
        } else {
            Integer cage = Integer.parseInt(cagestr);
            Integer uid = Integer.parseInt(uidstr);
            double cprice = Double.parseDouble(cpricestr);
            String fileName = mfile.getOriginalFilename();
            String path = request.getServletContext().getRealPath("");
            path = path.substring(0, path.lastIndexOf("\\"));
            path = path.substring(0, path.lastIndexOf("\\"));
            path = path + "\\upload";
            File file = new File(path);
            if (!file.exists()) {
                file.mkdir();
            }
            fileName = UUID.randomUUID().toString() + fileName;
            path = path+File.separator+fileName;
            file = new File(path);
            mfile.transferTo(file);
            String cpic = "/upload/"+fileName;
            double cmoney = 0;
            String isauth = "否";
            HttpSession session = request.getSession();
            Integer realUid =(Integer)session.getAttribute("uid");
            Integer count = (Integer) coachService.changeCoach(new Coach(cname,cgender,cpic,cmoney,type,contact,isauth,freetime,freeday,uid,secret,logaddress,cage,liupai,jieke,cprice,cnickname),uid);
            if (count > 0) {
                return "信息提交成功";
            } else {
                return "信息提交失败";
            }
        }
    }



    /**
    * 查询所有教练 动态sql
    * 姓名 年龄 性别 流派 类型 空闲时间 空闲天
    * @param page  现在的页数
     * @param rows  每页含有的条目
    * */
    @ApiOperation(value = "动态查询教师",notes = "pagehalper分页查询")
    @PostMapping(value = "/selCoach")
    @ResponseBody
    public Map<String, Object> selCoach(@RequestParam(value = "page",defaultValue = "1",required = false)Integer currentPage,
                                        @RequestParam(value = "rows",defaultValue = "5",required = false) Integer pageSize,
                                        @ModelAttribute CoachVO vo) {
        List<Coach> coaches = coachService.findAllCoach(currentPage, pageSize,vo);
        PageInfo<Coach> pageInfo = new PageInfo<>(coaches);
        Map<String, Object> result = new HashMap<>();
        result.put("total", pageInfo.getTotal());
        result.put("rows", pageInfo.getList());
        return result;
    }

    /*
    backmain页面添加教练
     */
    @RequestMapping("/simAddCoach")
    @ResponseBody
    public Result simAddCoach(MultipartFile cPhoto,Coach coach,HttpServletRequest request) throws IOException {
        if(coach.getCname()==null || coach.getCname()=="" || coach.getContact()==null || coach.getContact()=="" ){
            return  new Result(400,"请填写必要的信息");
        }
        String fileName = cPhoto.getOriginalFilename();
        if(fileName!=null&&!"".equals(fileName)){
            System.out.println(fileName);
            String path = request.getServletContext().getRealPath("");
            path = path.substring(0, path.lastIndexOf("\\"));
            path = path.substring(0, path.lastIndexOf("\\"));
            path = path + "\\upload";
            File file = new File(path);
            if(!file.exists()){
                file.mkdirs();
            }
            path=path+"/"+fileName;
            file = new File(path);
            cPhoto.transferTo(file);   //自动创建文件、写入数据
            coach.setCpic("/cpc/"+fileName);
        }
        try {
            coachService.addBackCoach(coach);
        } catch (Exception e) {
            return new Result(400,"未知异常");
        }
            return new Result(0,"添加成功");

    }

    /*
    修改信息
     */
    @RequestMapping("/updateCoach")
    @ResponseBody
    public Result updateCoach(MultipartFile cPhoto,Coach coach,HttpServletRequest request) throws IOException {
        if(coach.getCname()==null || coach.getCname()=="" || coach.getContact()==null || coach.getContact()=="" ){
            return  new Result(400,"请填写必要的信息");
        }
        String fileName = cPhoto.getOriginalFilename();
        if(fileName!=null&&!"".equals(fileName)){
            System.out.println(fileName);
            String path = request.getServletContext().getRealPath("");
            path = path.substring(0, path.lastIndexOf("\\"));
            path = path.substring(0, path.lastIndexOf("\\"));
            path = path + "\\upload";
            File file = new File(path);
            if(!file.exists()){
                file.mkdirs();
            }
            path=path+"/"+fileName;
            file = new File(path);
            cPhoto.transferTo(file);   //自动创建文件、写入数据
            coach.setCpic("/cpc/"+fileName);
        }
        int res =coachService.updateCoach(coach);
        if(res>0){
            return new Result(0,"修改成功");
        }
        return new Result(400,"未知异常");
    }


    /*
    后台删除教练
     */
    @RequestMapping("/deleteCoach")
    @ResponseBody
    public Result deleteCoach(Integer cid){
        //通过cid查询教练名下学生
        List<Student> list = coachService.findStudentByCid(cid);
        if (list.size() > 0) {
            return new Result(500,"该教练还有学生，无法删除");
        }
        /*根据cid查询教练*/
        Coach coach=coachService.selCoachById(cid);
        if(coach.getGid()!=null&&!coach.getGid().equals("")){
            return new Result(500,"该教练还有签约场馆，无法删除");
        }
        /*删除教练*/
        try {
            coachService.deleteCoach(cid);
            return new Result(0,"删除成功");
        } catch (Exception e) {
            e.printStackTrace();
            return new Result(400,"未知异常");
        }
    }

    /*
    展示教练信息
     */
    @RequestMapping("/randomSelCoach")
    @ResponseBody
    public List<Coach> randomSelCoach(){
        return new SelCoachVO().randomSelCoach(coachService);
    }



    //=============am===============
    @RequestMapping("/infoBack")
    @ResponseBody
    public Coach infoBack(Integer cid){
        Coach coach=coachService.infoBack(cid);
        return coach;
    }

    //==============================

    /**
     * 查看教师通过uid
     */
    @RequestMapping("/selCoachByUid")
    @ResponseBody
    public Coach findCoachByUid(Integer uid) {
        return coachService.selCoachByUid(uid);
    }




    @RequestMapping("/insertComm")
    @ResponseBody
    public void webInsertComm(Communication communication) {
        System.out.println(communication);
        communication.setIsRead(CoachComm.COMM_NO);
        coachService.insertComm(communication);
    }

    @RequestMapping("/showChatRecord")
    @ResponseBody
    public List<Communication> selChatRecord(Integer sendName,Integer receiveName){
        List<Communication> list = coachService.selChatRecord(sendName,receiveName);
        return  list;
    }
}
